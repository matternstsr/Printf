.TH _printf 3 "07-10-2023" "Linux" "User Manuals"
.SH NAME
_printf - A simple print function that is emulated from the standard printf function
.SH SYNOPSIS
.B _printf(const char *format, ...)
.SH DESCRIPTION
_printf() is a simple printf function that can be used to print formatted output to stdout. The format string is a string that contains special formatting codes that tell _printf() how to interpret the arguments that are passed to it.

.SH SPECIFICATIONS

The following are some of the formatting codes that can be used in the format string:

.RS
-%c - Print a character

-%s - Print a string

-%% - Print a literal '%' character

-%d - Print an integer in decimal notation

-%i - Print an integer in decimal notation (the same as `%d`)

-%b - Print a binary number
.RE

The following conversion specifiers are not handled by _printf():

.RS
-%u - Print an unsigned integer

-%o - Print an octal number

-%x - Print a hexadecimal number in lowercase letters

-%X - Print a hexadecimal number in uppercase letters

-%p - Print a pointer address

-%+ - Print a signed integer with a leading plus sign if the value is positive

-%# - Print a number in a format that is specific to the type of number being printed

-%l - Print a long integer

-%h - Print a short integer

-%- - Left-justify the output |

-%r - Print the reverse of the input string |

-%R - Print the rot13 encoding of the input string |
.RE

_printf() also does not handle the following:

.RS
-* Flag characters

-* Field width

-* Precision

-* Length modifiers

-* Buffer handling
.RE

.SH EXAMPLES

The following are some examples of how to use _printf():

.RS

_printf("I love holberton"); **// the output will be: I love Holberton**

_printf("%c", 'H'); // **the output will be: H**

_printf("Complete the sentence: Holberton %s rocks.\n", "totally"); **// the output will be: Complete the sentence: Holberton totally rocks.**

_printf("% s", "Holbies"); **// the output will be: Holbies**

_printf("% h"); **// the output will be: % h**

_printf("%!\n"); **// the output will be '%!'**

_printf("%s", "Holberton is awesome"); **// the output will be: Holberton is awesome**

.RE

.SH RETURN VALUE

_printf() returns the number of characters that were printed.

.SH BUGS

There are no known bugs in _printf(). *(THAT WE KNOW OF)*

.SH AUTHORS

Matt Ernst and Connor True

.SH COPYRIGHT

Copyright (c) 2023 Matt Ernst and Connor True. This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
